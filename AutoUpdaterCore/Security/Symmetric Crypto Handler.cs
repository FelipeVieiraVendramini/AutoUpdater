#region Header and Copyright

// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (C) Felipe Vieira Vendramini - All rights reserved
// The copy or distribution of this file or software without the original lines of this header is extrictly
// forbidden. This code is public and free as is, and if you alter anything you can insert your name
// in the fields below.
// 
// AutoUpdater - AutoUpdaterCore - Symmetric Crypto Handler.cs
// 
// Description: <Write a description for this file>
// 
// Colaborators who worked in this file:
// Felipe Vieira Vendramini
// 
// Developed by:
// Felipe Vieira Vendramini <service@ftwmasters.com.br>
// //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endregion

using System.Security.Cryptography;

namespace AutoUpdaterCore.Security
{
    public sealed class SymmetricCryptoHandler
    {
        private byte[] m_encryptedKey =
        {
            0xCC, 0x88, 0xB4, 0xEB, 0x66, 0xE5, 0x1F, 0xBD, 0x9B, 0x44, 0xFC, 0xA2, 0x0C, 0x82, 0x3F, 0xBC, 0x0E, 0xD1,
            0x20, 0xC3, 0x6C, 0x17, 0x8A, 0x5D, 0x3D, 0xB1, 0x45, 0xE5, 0x88, 0xB5, 0x2F, 0x53, 0x03, 0xD5, 0x74, 0x0F,
            0x7B, 0x75, 0x0B, 0x68, 0xB6, 0xC7, 0xFB, 0xB0, 0x19, 0xB3, 0x7D, 0xAC, 0x3C, 0xDB, 0xC7, 0x0C, 0x23, 0xB5,
            0x89, 0xC7, 0x2E, 0x0C, 0x55, 0x53, 0x33, 0xD4, 0xD5, 0xC8, 0x8A, 0xC7, 0xA7, 0x2C, 0xEB, 0x66, 0x89, 0xAA,
            0xE0, 0x5D, 0x5F, 0x29, 0x7D, 0xE9, 0x66, 0xB7, 0x40, 0x97, 0xC8, 0x5F, 0xEF, 0x6E, 0x4C, 0x98, 0xF5, 0xF7,
            0x15, 0xD3, 0xDF, 0xA8, 0x96, 0xAF, 0xC6, 0x5A, 0xF2, 0xBD, 0x8A, 0x93, 0xC8, 0x03, 0xB6, 0x0F, 0x40, 0x9E,
            0xAD, 0xE4, 0x38, 0x37, 0x12, 0x7A, 0x90, 0x7E, 0x8B, 0xBB, 0xF4, 0xE4, 0x85, 0xF4, 0x97, 0xE9, 0x9A, 0xCB,
            0x14, 0xDB
        };

        private byte[] m_encriptedIv =
        {
            0x5A, 0x52, 0xDD, 0x12, 0xE2, 0x5A, 0x55, 0xF7, 0x3B, 0xC8, 0x02, 0x36, 0x38, 0x03, 0x8E, 0x65, 0x82, 0x80,
            0x5D, 0xA2, 0xFA, 0x1A, 0x09, 0xE7, 0xDE, 0x14, 0x08, 0xDA, 0x98, 0xDD, 0x73, 0x3B, 0x60, 0x73, 0xDD, 0x1E,
            0xE2, 0x02, 0x5B, 0xA0, 0x60, 0x66, 0x9E, 0x35, 0xB4, 0xDC, 0x75, 0x02, 0x6E, 0x5A, 0x7A, 0x64, 0x7C, 0x60,
            0x5D, 0x14, 0xE9, 0xB9, 0xD1, 0xA4, 0x77, 0x76, 0xCC, 0xB3, 0x32, 0x83, 0x91, 0x2F, 0xB0, 0xB5, 0x18, 0xD9,
            0x13, 0xA1, 0xDC, 0x39, 0xFB, 0xF2, 0x50, 0x24, 0x21, 0x97, 0x30, 0x0B, 0x77, 0x19, 0xD1, 0xCE, 0xC0, 0xC6,
            0x14, 0x5C, 0x7D, 0xF3, 0x3A, 0x56, 0x90, 0xD5, 0xD0, 0xCF, 0x04, 0xFB, 0xDA, 0x10, 0x4E, 0x6D, 0x0A, 0xEC,
            0x05, 0x37, 0x67, 0xD4, 0xB2, 0x4B, 0x85, 0xB5, 0x8C, 0xB3, 0x91, 0x2A, 0xB1, 0x93, 0x17, 0x28, 0xF3, 0xE7,
            0x68, 0x5C
        };

        private RSAParameters m_public;

        public SymmetricCryptoHandler(RSAParameters @public)
        {
            m_public = @public;
        }

        public byte[] Encrypt(byte[] data)
        {
            AsymmetricCryptoHandler crypto = new AsymmetricCryptoHandler(m_public, false);

            byte[] key = crypto.Decrypt(m_encryptedKey);
            byte[] iv = crypto.Decrypt(m_encriptedIv);

            return new TripleDESCryptoServiceProvider().CreateEncryptor(key, iv)
                .TransformFinalBlock(data, 0, data.Length);
        }

        public byte[] Decrypt(byte[] data)
        {
            AsymmetricCryptoHandler crypto = new AsymmetricCryptoHandler(m_public, false);

            byte[] key = crypto.Decrypt(m_encryptedKey);
            byte[] iv = crypto.Decrypt(m_encriptedIv);

            return new TripleDESCryptoServiceProvider().CreateDecryptor(key, iv)
                .TransformFinalBlock(data, 0, data.Length);
        }
    }
}